import numpy as np
import pandas as pd
import seaborn as sns
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train test split

# The data set is loaded as df by the- the path of my P.C is not relevant

X = df[['variance', 'skewness', 'curtosis', 'entropy']]
y = y df['class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)

# Pairplot 
sns.pairplot(banknotes, hue='class') 

# Show the plot
plt.show()

# Describe the data
print('Dataset stats: \n', banknotes.describe())

# Count the number of observations per class
print('Observations per class: \n', banknotes['class'].value_counts())

"""
print
Dataset stats: 
         variance   skewness   curtosis    entropy
count  96.000000  96.000000  96.000000  96.000000
mean   -0.057791  -0.102829   0.230412   0.081497
std     1.044960   1.059236   1.128972   0.975565
min    -2.084590  -2.621646  -1.482300  -3.034187
25%    -0.839124  -0.916152  -0.415294  -0.262668
50%    -0.026748  -0.037559  -0.033603   0.394888
75%     0.871034   0.813601   0.978766   0.745212
max     1.869239   1.634072   3.759017   1.343345
Observations per class: 
 real    53
fake    43
Name: class, dtype: int64
"""

# Create a sequential model
model = Sequential()

# Add a dense layer 
model.add(Dense(1, input_shape=(4,), activation='sigmoid'))

# Compile 
model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

# Train your model for 20 epochs
model.fit(X_train, y_train, epochs = 200)

# Evaluate your model accuracy on the test set
accuracy = model.evaluate(X_test, y_test)[1]

# Print accuracy
print('Accuracy:', accuracy)
"""
print:
Accuracy: 0.9781553398058253
"""
